(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{370:function(t,s,n){"use strict";n.r(s);var a=n(4),e=Object(a.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("Go 语言通过 "),s("code",[t._v("sync/atomic")]),t._v(" 包提供了一组用于原子操作的函数，这些函数能够在多线程环境中确保对共享变量的安全访问。原子操作是一种确保在执行某个操作时，不会被中断的操作，这在并发编程中至关重要。")]),t._v(" "),s("h3",{attrs:{id:"_1-原子操作的基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-原子操作的基础"}},[t._v("#")]),t._v(" 1. "),s("strong",[t._v("原子操作的基础")])]),t._v(" "),s("p",[t._v("原子操作通过硬件级别的支持来实现，通常使用 CPU 提供的原子指令（如 "),s("code",[t._v("compare-and-swap (CAS)")]),t._v("）来完成。在 Go 中，"),s("code",[t._v("sync/atomic")]),t._v(" 包封装了这些底层的硬件指令，提供了一些常用的原子操作函数，适用于 "),s("code",[t._v("int32")]),t._v("、"),s("code",[t._v("int64")]),t._v("、"),s("code",[t._v("uint32")]),t._v("、"),s("code",[t._v("uint64")]),t._v(" 和 "),s("code",[t._v("uintptr")]),t._v(" 等类型的变量。")]),t._v(" "),s("h3",{attrs:{id:"_2-常见的原子操作函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-常见的原子操作函数"}},[t._v("#")]),t._v(" 2. "),s("strong",[t._v("常见的原子操作函数")])]),t._v(" "),s("p",[s("code",[t._v("sync/atomic")]),t._v(" 包中的函数大致可以分为以下几类：")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("加法与减法")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("atomic.AddInt32(&val, delta int32) int32")])]),t._v(" "),s("li",[s("code",[t._v("atomic.AddInt64(&val, delta int64) int64")])]),t._v(" "),s("li",[t._v("这些函数用于对整数进行原子加法或减法操作。")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("加载与存储")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("atomic.LoadInt32(&val int32) int32")])]),t._v(" "),s("li",[s("code",[t._v("atomic.LoadInt64(&val int64) int64")])]),t._v(" "),s("li",[s("code",[t._v("atomic.StoreInt32(&val *int32, new int32)")])]),t._v(" "),s("li",[s("code",[t._v("atomic.StoreInt64(&val *int64, new int64)")])]),t._v(" "),s("li",[t._v("加载和存储操作用于安全地读取或写入共享变量。")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("交换操作")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("atomic.SwapInt32(&val int32, new int32) int32")])]),t._v(" "),s("li",[s("code",[t._v("atomic.SwapInt64(&val int64, new int64) int64")])]),t._v(" "),s("li",[t._v("交换操作会将一个新值写入变量，并返回变量的旧值。")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("比较并交换（CAS）")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("atomic.CompareAndSwapInt32(&val *int32, old, new int32) bool")])]),t._v(" "),s("li",[s("code",[t._v("atomic.CompareAndSwapInt64(&val *int64, old, new int64) bool")])]),t._v(" "),s("li",[t._v("比较并交换操作会在 "),s("code",[t._v("val")]),t._v(" 的当前值等于 "),s("code",[t._v("old")]),t._v(" 时，将其更新为 "),s("code",[t._v("new")]),t._v("，否则不做任何操作。")])])])]),t._v(" "),s("h3",{attrs:{id:"_3-原子操作的实现原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-原子操作的实现原理"}},[t._v("#")]),t._v(" 3. "),s("strong",[t._v("原子操作的实现原理")])]),t._v(" "),s("p",[s("code",[t._v("sync/atomic")]),t._v(" 包中的操作是通过底层 CPU 的原子指令实现的，确保这些操作在多处理器环境中是原子的，不会被中断。")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("CompareAndSwap (CAS)")]),t._v(": 这是最基础的原子操作，通过比较当前值与期望值，如果相等则更新为新值。这一操作在硬件上通过指令（如 "),s("code",[t._v("LOCK CMPXCHG")]),t._v("）实现。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("内存屏障")]),t._v(": 为了确保内存操作的顺序性，Go 的原子操作通常伴随着内存屏障（Memory Barrier），这阻止了编译器或 CPU 对指令的重新排序，从而保证在多核环境下的内存一致性。")])])]),t._v(" "),s("h3",{attrs:{id:"_4-原子操作的使用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-原子操作的使用场景"}},[t._v("#")]),t._v(" 4. "),s("strong",[t._v("原子操作的使用场景")])]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("计数器")]),t._v(": 可以使用 "),s("code",[t._v("atomic.AddInt64")]),t._v(" 来实现线程安全的计数器，而不需要引入复杂的锁机制。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("状态机")]),t._v(": 使用 "),s("code",[t._v("atomic.CompareAndSwap")]),t._v(" 可以实现线程安全的状态机，确保状态转换的正确性。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("指针交换")]),t._v(": "),s("code",[t._v("atomic.SwapPointer")]),t._v(" 可以用于实现高效的指针交换操作，这在实现无锁数据结构时非常有用。")])])]),t._v(" "),s("h3",{attrs:{id:"_5-与互斥锁的对比"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-与互斥锁的对比"}},[t._v("#")]),t._v(" 5. "),s("strong",[t._v("与互斥锁的对比")])]),t._v(" "),s("p",[t._v("原子操作通常比互斥锁更轻量，因为它们不会导致上下文切换或线程调度。然而，原子操作只适用于单一变量的读写，对于更复杂的数据结构，仍需要使用互斥锁来保护。")]),t._v(" "),s("h3",{attrs:{id:"_6-实际代码示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-实际代码示例"}},[t._v("#")]),t._v(" 6. "),s("strong",[t._v("实际代码示例")])]),t._v(" "),s("p",[t._v("以下是一个使用原子操作实现线程安全计数器的示例：")]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sync"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sync/atomic"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" counter "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" wg sync"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("WaitGroup\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        wg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("go")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            atomic"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("AddInt64")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("counter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            wg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Done")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    wg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Wait")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    fmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Final Counter:"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" counter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br")])]),s("p",[t._v("在这个例子中，"),s("code",[t._v("atomic.AddInt64")]),t._v(" 保证了对 "),s("code",[t._v("counter")]),t._v(" 的加操作是线程安全的，最终的计数值将是 1000。")]),t._v(" "),s("h3",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("p",[t._v("Go 语言通过 "),s("code",[t._v("sync/atomic")]),t._v(" 包提供了原子操作的支持，这些操作可以在无锁的情况下安全地进行并发访问，是实现高性能并发程序的重要工具")])])}),[],!1,null,null,null);s.default=e.exports}}]);