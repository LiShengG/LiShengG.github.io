(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{339:function(n,t,a){"use strict";a.r(t);var e=a(4),v=Object(e.a)({},(function(){var n=this,t=n._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("p",[n._v("new 和 make 是 Go 语言中创建数据结构的两种方式，但它们的用途和工作方式有很大不同。以下是两者的主要区别：")]),n._v(" "),t("p",[n._v("new\n用途：new 是用于创建某个类型的零值指针。它分配内存并返回一个指向该类型的新分配内存的指针。\n适用类型：任何类型，包括基本类型、结构体、数组、切片、映射等。\n返回值：返回的是一个指向该类型的指针。\n示例：\npackage main")]),n._v(" "),t("p",[n._v('import "fmt"')]),n._v(" "),t("p",[n._v("func main() {"),t("br"),n._v("\n// 使用 new 创建一个int类型的零值指针"),t("br"),n._v("\np := new(int)"),t("br"),n._v("\nfmt.Println(*p) // 输出：0（整数的零值）")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("// 将其值修改为42  \n*p = 42  \nfmt.Println(*p) // 输出：42  \n")])])]),t("p",[n._v("}"),t("br"),n._v("\n在这个示例中，new(int) 创建了一个指向 int 类型的指针，并且它的初始值为零值（0）。")]),n._v(" "),t("p",[n._v("make\n用途：make 是用于初始化切片、映射和通道，这些类型的零值是 nil，不能直接使用。make 不返回指针，而是返回一个初始化好的值。\n适用类型：只适用于切片、映射和通道。\n返回值：返回的是初始化好的值，而不是指向该值的指针。\n示例：\npackage main")]),n._v(" "),t("p",[n._v('import "fmt"')]),n._v(" "),t("p",[n._v("func main() {"),t("br"),n._v("\n// 使用 make 创建一个切片"),t("br"),n._v("\ns := make([]int, 0) // 创建一个长度为0的切片"),t("br"),n._v("\nfmt.Println(s)      // 输出：[]")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('// 向切片中添加元素  \ns = append(s, 1, 2, 3)  \nfmt.Println(s)      // 输出：[1 2 3]  \n\n// 使用 make 创建一个映射  \nm := make(map[string]int)  \nm["a"] = 1  \nm["b"] = 2  \nfmt.Println(m) // 输出：map[a:1 b:2]  \n')])])]),t("p",[n._v("}"),t("br"),n._v("\n在这个示例中，make 用于创建一个切片和一个映射（map），并对它们进行了初始化。")]),n._v(" "),t("p",[n._v("总结\n使用 new 创建任意类型的指针，并返回一个指向该类型的零值指针。\n使用 make 初始化切片、映射和通道，并返回一个已初始化的（非 nil）值。\n对于使用哪一个，简单可以记住：")]),n._v(" "),t("p",[n._v("使用 new 时，关注指针和原始值的分配。\n使用 make 时，关注初始化和使用特定的数据结构。")])])}),[],!1,null,null,null);t.default=v.exports}}]);