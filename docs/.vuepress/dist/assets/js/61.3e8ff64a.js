(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{419:function(t,s,a){"use strict";a.r(s);var n=a(4),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"go的切片和c-vector的对比"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#go的切片和c-vector的对比"}},[t._v("#")]),t._v(" Go的切片和c++ vector的对比")]),t._v(" "),s("h3",{attrs:{id:"相同点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#相同点"}},[t._v("#")]),t._v(" 相同点：")]),t._v(" "),s("ol",[s("li",[s("p",[s("strong",[t._v("动态大小")]),t._v("：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("Golang 切片")]),t._v(" 和 "),s("strong",[t._v("C++ "),s("code",[t._v("vector")])]),t._v(" 都可以根据需要动态调整大小。用户不需要手动管理它们的大小或容量，它们会自动进行扩容。")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("连续的内存")]),t._v("：")]),t._v(" "),s("ul",[s("li",[t._v("它们的底层存储都是基于"),s("strong",[t._v("连续的内存空间")]),t._v("，这使得它们可以高效地进行随机访问。访问任意索引的元素的时间复杂度都是 O(1)。")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("自动扩容")]),t._v("：")]),t._v(" "),s("ul",[s("li",[t._v("当切片或 "),s("code",[t._v("vector")]),t._v(" 容量不足时，都会自动扩容，将原有的元素复制到更大的内存块中。")]),t._v(" "),s("li",[t._v("在大多数实现中，扩容通常会按照"),s("strong",[t._v("倍数增长")]),t._v("的策略来减少频繁的重新分配。")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("基于引用的拷贝")]),t._v("：")]),t._v(" "),s("ul",[s("li",[t._v("在大多数情况下，切片和 "),s("code",[t._v("vector")]),t._v(" 的拷贝都是"),s("strong",[t._v("浅拷贝")]),t._v("，即传递的是底层数据的引用。更改副本中的内容会影响原始数据，除非显式进行深拷贝。")])])])]),t._v(" "),s("h3",{attrs:{id:"不同点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不同点"}},[t._v("#")]),t._v(" 不同点：")]),t._v(" "),s("ol",[s("li",[s("p",[s("strong",[t._v("底层数据结构")]),t._v("：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("Golang 切片")]),t._v("：切片是对底层数组的"),s("strong",[t._v("引用")]),t._v("。一个切片由三个部分组成："),s("strong",[t._v("指向数组的指针")]),t._v("、"),s("strong",[t._v("长度")]),t._v(" 和 "),s("strong",[t._v("容量")]),t._v("。切片是对底层数组的视图，可以基于现有数组创建不同的切片，不需要重新分配内存。这也意味着多个切片可以共享同一个底层数组。")]),t._v(" "),s("li",[s("strong",[t._v("C++ "),s("code",[t._v("vector")])]),t._v("："),s("code",[t._v("vector")]),t._v(" 本身是一个包含元素的容器，所有元素存储在 "),s("code",[t._v("vector")]),t._v(" 自己管理的连续内存区域中。"),s("code",[t._v("vector")]),t._v(" 中的元素不与其他容器共享内存。")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("容量管理")]),t._v("：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("Golang 切片")]),t._v("：切片的容量是从其起始位置到底层数组末尾的空间。通过调整切片的长度，可以在不重新分配内存的情况下缩小或扩展切片的视图。当容量不足时，切片会自动分配新的底层数组。")]),t._v(" "),s("li",[s("strong",[t._v("C++ "),s("code",[t._v("vector")])]),t._v("："),s("code",[t._v("vector")]),t._v(" 的容量和长度是独立的概念，"),s("code",[t._v("vector")]),t._v(" 的容量是它当前能够容纳的元素数，长度是已存储的元素数。当 "),s("code",[t._v("vector")]),t._v(" 的容量不足时，会进行扩容，分配新的内存块并复制原有数据。")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("多切片共享数据")]),t._v("：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("Golang 切片")]),t._v("：由于切片是数组的视图，可以从同一个数组创建多个切片，这些切片共享同一个底层数组。修改一个切片可能会影响其他切片，除非显式地重新分配内存。")]),t._v(" "),s("li",[s("strong",[t._v("C++ "),s("code",[t._v("vector")])]),t._v("："),s("code",[t._v("vector")]),t._v(" 的数据不共享，不可能通过多个 "),s("code",[t._v("vector")]),t._v(" 直接共享同一块内存空间。每个 "),s("code",[t._v("vector")]),t._v(" 独立管理它的内存。")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("内存管理与回收")]),t._v("：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("Golang 切片")]),t._v("：切片在 Go 语言中依赖垃圾回收机制。只要切片或底层数组的引用还存在，垃圾回收器就不会释放底层数组的内存。当切片缩小时，切片的容量不会立即减少，因此可能会浪费一些未使用的内存，除非显式调用 "),s("code",[t._v("copy")]),t._v(" 等方式将数据迁移到新数组中。")]),t._v(" "),s("li",[s("strong",[t._v("C++ "),s("code",[t._v("vector")])]),t._v("："),s("code",[t._v("vector")]),t._v(" 由 C++ 的内存分配器管理。当 "),s("code",[t._v("vector")]),t._v(" 被销毁或超出作用域时，内存会被立即释放。C++ 不需要垃圾回收。")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("线程安全")]),t._v("：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("Golang 切片")]),t._v("：切片本身不是线程安全的，如果多个 goroutine 并发地修改切片，必须手动进行同步处理。")]),t._v(" "),s("li",[s("strong",[t._v("C++ "),s("code",[t._v("vector")])]),t._v("：同样，"),s("code",[t._v("vector")]),t._v(" 也不是线程安全的，多个线程同时访问或修改同一个 "),s("code",[t._v("vector")]),t._v(" 也需要同步处理。")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("API 风格")]),t._v("：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("Golang 切片")]),t._v("：切片的 API 比 "),s("code",[t._v("vector")]),t._v(" 更简单，比如通过内置函数 "),s("code",[t._v("append")]),t._v(" 来动态增加元素。")]),t._v(" "),s("li",[s("strong",[t._v("C++ "),s("code",[t._v("vector")])]),t._v("：提供了更丰富的操作接口，比如 "),s("code",[t._v("insert")]),t._v("、"),s("code",[t._v("erase")]),t._v(" 等，用于在中间位置插入或删除元素，但操作相对繁琐。")])])])]),t._v(" "),s("h3",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("相同点")]),t._v("：Golang 的切片和 C++ 的 "),s("code",[t._v("vector")]),t._v(" 都是动态数组，提供连续内存存储、高效随机访问、自动扩容等功能。")]),t._v(" "),s("li",[s("strong",[t._v("不同点")]),t._v("：Golang 的切片是对底层数组的视图，可能与其他切片共享同一块内存，而 C++ 的 "),s("code",[t._v("vector")]),t._v(" 是一个独立的容器，独占其内存。切片依赖垃圾回收进行内存管理，而 "),s("code",[t._v("vector")]),t._v(" 由 C++ 的内存管理器负责，且 API 风格和内存分配方式有所不同。")])]),t._v(" "),s("h2",{attrs:{id:"go中的容器-vs-c-的容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#go中的容器-vs-c-的容器"}},[t._v("#")]),t._v(" Go中的容器 vs c++ 的容器")]),t._v(" "),s("p",[t._v("在 Go 语言中，确实没有像 C++ 那样直接提供类似 "),s("code",[t._v("stack")]),t._v("、"),s("code",[t._v("deque")]),t._v("、"),s("code",[t._v("unordered_map")]),t._v(" 等标准容器数据结构。Go 语言的设计哲学是简洁和直接，许多复杂的数据结构需要开发者自己实现或通过第三方库来使用。下面详细解释 Go 语言内置的数据结构和与 C++ 容器的对比：")]),t._v(" "),s("h3",{attrs:{id:"_1-array-和-slice-与-c-中的-vector-对应"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-array-和-slice-与-c-中的-vector-对应"}},[t._v("#")]),t._v(" 1. "),s("strong",[t._v("Array 和 Slice（与 C++ 中的 "),s("code",[t._v("vector")]),t._v(" 对应）")]),t._v("：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("Array")]),t._v("：Go 中的数组是固定大小的，与 C++ 的原生数组类似，大小是编译时确定的，且长度不可修改。")]),t._v(" "),s("li",[s("strong",[t._v("Slice")]),t._v("：Go 中的 "),s("code",[t._v("slice")]),t._v(" 是动态数组，可以随着元素的增加动态扩容。它与 C++ 中的 "),s("code",[t._v("vector")]),t._v(" 类似，但 Go 的 "),s("code",[t._v("slice")]),t._v(" 更简洁，同时具有 "),s("code",[t._v("len")]),t._v(" 和 "),s("code",[t._v("cap")]),t._v(" 概念，动态调整时可能会重新分配底层数组。")])]),t._v(" "),s("h3",{attrs:{id:"_2-map-与-c-中的-map-和-unordered-map-对应"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-map-与-c-中的-map-和-unordered-map-对应"}},[t._v("#")]),t._v(" 2. "),s("strong",[t._v("Map（与 C++ 中的 "),s("code",[t._v("map")]),t._v(" 和 "),s("code",[t._v("unordered_map")]),t._v(" 对应）")]),t._v("：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("Map")]),t._v("：Go 提供了内置的 "),s("code",[t._v("map")]),t._v(" 类型，它实现了键值对的存储。Go 的 "),s("code",[t._v("map")]),t._v(" 相当于 C++ 的 "),s("code",[t._v("unordered_map")]),t._v("，底层通过哈希表实现，因此查找、插入、删除的时间复杂度为 O(1)。")]),t._v(" "),s("li",[t._v("Go 没有像 C++ 的 "),s("code",[t._v("map")]),t._v("（基于红黑树，支持有序键值对）那样的有序映射容器。要实现有序的 "),s("code",[t._v("map")]),t._v(" 需要自己管理键的顺序，比如可以在 "),s("code",[t._v("map")]),t._v(" 之外维护一个排序的键数组。")])]),t._v(" "),s("h3",{attrs:{id:"_3-stack-栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-stack-栈"}},[t._v("#")]),t._v(" 3. "),s("strong",[t._v("Stack（栈）")]),t._v("：")]),t._v(" "),s("ul",[s("li",[t._v("Go 语言没有直接提供栈（"),s("code",[t._v("stack")]),t._v("）数据结构。栈的实现通常通过 "),s("code",[t._v("slice")]),t._v(" 来完成。由于 "),s("code",[t._v("slice")]),t._v(" 支持动态扩展，可以使用 "),s("code",[t._v("append")]),t._v(" 添加元素，使用 "),s("code",[t._v("len(slice)-1")]),t._v(" 来访问栈顶元素并通过 "),s("code",[t._v("slice = slice[:len(slice)-1]")]),t._v(" 弹出栈顶元素。")]),t._v(" "),s("li",[t._v("虽然没有标准库实现，但 "),s("code",[t._v("slice")]),t._v(" 本质上可以轻松实现 LIFO（Last In, First Out）行为。")])]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[t._v("stack "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nstack "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stack"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Push")]),t._v("\ntop "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" stack"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stack"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Peek")]),t._v("\nstack "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" stack"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stack"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Pop")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("h3",{attrs:{id:"_4-queue-队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-queue-队列"}},[t._v("#")]),t._v(" 4. "),s("strong",[t._v("Queue（队列）")]),t._v("：")]),t._v(" "),s("ul",[s("li",[t._v("类似于栈，Go 中没有内置的 "),s("code",[t._v("queue")]),t._v(" 数据结构，但可以通过 "),s("code",[t._v("slice")]),t._v(" 来实现。"),s("code",[t._v("slice")]),t._v(" 支持从末尾插入和删除，但从头部删除时效率较低，因为需要移动所有元素。")]),t._v(" "),s("li",[t._v("如果需要高效的双端队列操作，可以通过 "),s("code",[t._v("slice")]),t._v(" 实现，也可以使用第三方库（比如 "),s("code",[t._v("container/list")]),t._v("）。")])]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[t._v("queue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nqueue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("queue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Enqueue")]),t._v("\nfront "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" queue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("         "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Peek")]),t._v("\nqueue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" queue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("         "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Dequeue")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("h3",{attrs:{id:"_5-deque-双端队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-deque-双端队列"}},[t._v("#")]),t._v(" 5. "),s("strong",[t._v("Deque（双端队列）")]),t._v("：")]),t._v(" "),s("ul",[s("li",[t._v("Go 没有内置的 "),s("code",[t._v("deque")]),t._v(" 数据结构。虽然可以使用 "),s("code",[t._v("slice")]),t._v(" 来模拟双端队列的功能，但由于 "),s("code",[t._v("slice")]),t._v(" 在头部插入或删除元素需要移动其他元素，效率不是最优。")]),t._v(" "),s("li",[t._v("Go 提供了 "),s("code",[t._v("container/list")]),t._v(" 包，可以实现双端队列的功能。"),s("code",[t._v("list")]),t._v(" 是一个双向链表，支持从前面和后面高效地插入和删除元素。")])]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"container/list"')]),t._v("\n\ndeque "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("New")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ndeque"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("PushBack")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Append to the back")]),t._v("\ndeque"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("PushFront")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Append to the front")]),t._v("\ndeque"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Remove")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("deque"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Back")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Remove from the back")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("h3",{attrs:{id:"_6-set-集合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-set-集合"}},[t._v("#")]),t._v(" 6. "),s("strong",[t._v("Set（集合）")]),t._v("：")]),t._v(" "),s("ul",[s("li",[t._v("Go 中没有直接的 "),s("code",[t._v("set")]),t._v(" 数据结构，但可以通过 "),s("code",[t._v("map")]),t._v(" 来模拟集合的行为，键作为元素，值可以设为 "),s("code",[t._v("bool")]),t._v(" 类型的 "),s("code",[t._v("true")]),t._v(" 或其他常量。")]),t._v(" "),s("li",[t._v("这种实现方式非常高效，因为 Go 的 "),s("code",[t._v("map")]),t._v(" 是基于哈希表实现的，查找、插入和删除的时间复杂度是 O(1)。")])]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[t._v("set "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Add")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("delete")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("set"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Remove")]),t._v("\nexists "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" set"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Check existence")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("h3",{attrs:{id:"_7-priority-queue-优先队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-priority-queue-优先队列"}},[t._v("#")]),t._v(" 7. "),s("strong",[t._v("Priority Queue（优先队列）")]),t._v("：")]),t._v(" "),s("ul",[s("li",[t._v("Go 没有内置的优先队列（"),s("code",[t._v("priority_queue")]),t._v("）数据结构，但可以使用 "),s("code",[t._v("container/heap")]),t._v(" 包来实现堆，进而构建优先队列。开发者需要实现一个满足 "),s("code",[t._v("heap.Interface")]),t._v(" 接口的自定义类型，定义元素的排序规则。")]),t._v(" "),s("li",[s("code",[t._v("heap")]),t._v(" 可以实现最小堆或最大堆，支持插入、删除和调整堆的操作。")])]),t._v(" "),s("div",{staticClass:"language-go line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"container/heap"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Define a priority queue by implementing heap.Interface")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" IntHeap "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("h IntHeap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("           "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("h"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("h IntHeap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Less")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" h"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" h"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("h IntHeap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Swap")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" h"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" h"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" h"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" h"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("h "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("IntHeap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("h "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("h"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("h "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("IntHeap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pop")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    old "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("h\n    n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("old"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" old"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("h "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" old"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    h "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("IntHeap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    heap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Init")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("h"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    heap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("h"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    fmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"minimum: %d\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("h"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br")])]),s("h3",{attrs:{id:"_8-third-party-libraries"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-third-party-libraries"}},[t._v("#")]),t._v(" 8. "),s("strong",[t._v("Third-Party Libraries")]),t._v("：")]),t._v(" "),s("p",[t._v("虽然 Go 没有像 C++ 那样提供丰富的标准容器库，但 Go 生态中有很多第三方库提供这些数据结构的实现，例如：")]),t._v(" "),s("ul",[s("li",[s("strong",[s("code",[t._v("github.com/golang-collections/collections")])]),t._v("：提供类似于 "),s("code",[t._v("stack")]),t._v("、"),s("code",[t._v("queue")]),t._v(" 和 "),s("code",[t._v("deque")]),t._v(" 的实现。")]),t._v(" "),s("li",[s("strong",[s("code",[t._v("github.com/emirpasic/gods")])]),t._v("：提供多种数据结构，包括 "),s("code",[t._v("TreeMap")]),t._v("、"),s("code",[t._v("HashSet")]),t._v("、"),s("code",[t._v("PriorityQueue")]),t._v(" 等。")])]),t._v(" "),s("h3",{attrs:{id:"总结-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结-2"}},[t._v("#")]),t._v(" 总结：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("Golang 内置的数据结构")]),t._v(" 相对简洁，主要包括 "),s("code",[t._v("slice")]),t._v("、"),s("code",[t._v("map")]),t._v(" 和 "),s("code",[t._v("array")]),t._v("，这些容器可以满足大部分应用场景。")]),t._v(" "),s("li",[s("strong",[t._v("C++ 提供了更为丰富和复杂的数据结构")]),t._v("（如 "),s("code",[t._v("stack")]),t._v("、"),s("code",[t._v("deque")]),t._v("、"),s("code",[t._v("unordered_map")]),t._v(" 等），这些容器封装得更完善，提供了更多的功能。")]),t._v(" "),s("li",[t._v("Go 鼓励开发者通过基础的内置数据结构（如 "),s("code",[t._v("slice")]),t._v(" 和 "),s("code",[t._v("map")]),t._v("）构建自己需要的复杂数据结构，或依赖第三方库来扩展语言的功能。")])])])}),[],!1,null,null,null);s.default=e.exports}}]);