(window.webpackJsonp=window.webpackJsonp||[]).push([[96],{447:function(v,_,e){"use strict";e.r(_);var i=e(4),n=Object(i.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"文件系统中查找文件的过程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#文件系统中查找文件的过程"}},[v._v("#")]),v._v(" 文件系统中查找文件的过程")]),v._v(" "),_("p",[v._v("以EXT4为例子")]),v._v(" "),_("ol",[_("li",[_("p",[_("strong",[v._v("查找根目录的inode")]),v._v(": Linux系统开始解析路径时，会从根目录的inode开始。根目录的inode号通常是2（在许多Unix和Linux文件系统中保留给根目录）。")])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("读取根目录inode")]),v._v(": 文件系统从inode表中读取inode 2的内容，获取该inode指向的磁盘数据块位置。")])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("读取目录数据块")]),v._v(": 根据inode中指向的磁盘数据块位置，文件系统读取存储根目录内容的磁盘块。根目录的数据块包含多个目录项，每个目录项代表一个文件或子目录。")])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("匹配文件名")]),v._v(": 文件系统线性搜索或使用HTree索引（如果目录项很多）来查找与目标文件名匹配的目录项。找到匹配项后，获取对应的inode号码。")])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("读取下一级目录的inode")]),v._v(": 文件系统使用匹配的目录项中的inode号码来读取下一级目录的inode内容。重复步骤3和4，逐级查找路径中的每一个路径组件。")])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("找到目标文件目录项")]),v._v(": 最终找到目标文件或目录的目录项。此目录项包含目标文件的文件名和对应的inode号码。")])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("读取文件的inode")]),v._v(": 使用找到的inode号码，文件系统从inode表中读取目标文件的inode。该inode包含目标文件的元数据（如文件权限、大小、时间戳等）以及指向数据块的指针。")])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("获取文件数据")]),v._v(": 根据inode中的数据块指针，文件系统可以进一步读取文件的实际数据内容。")])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("缓存")]),v._v("：为了进一步优化性能，Linux系统使用缓存来减少磁盘I/O操作：\n- dentry cache（目录项缓存）: 缓存最近访问过的文件名到inode的映射，加速路径解析。\n- inode cache（inode缓存）: 缓存最近访问过的inode结构，减少频繁的磁盘读取。")])])]),v._v(" "),_("hr"),v._v(" "),_("h2",{attrs:{id:"inode表中包含了哪些内容"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#inode表中包含了哪些内容"}},[v._v("#")]),v._v(" inode表中包含了哪些内容")]),v._v(" "),_("p",[v._v("在Linux和大多数Unix文件系统（如EXT4、XFS等）中，"),_("strong",[v._v("inode")]),v._v("（索引节点）是用于存储文件元数据的关键结构。每个文件和目录在文件系统中都有一个唯一的inode，inode表中每个inode条目包含了该文件或目录的各种元数据信息。具体来说，inode中包含以下主要内容：")]),v._v(" "),_("h3",{attrs:{id:"inode包含的主要信息"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#inode包含的主要信息"}},[v._v("#")]),v._v(" inode包含的主要信息")]),v._v(" "),_("ol",[_("li",[_("p",[_("strong",[v._v("文件类型（File Type）")]),v._v(":")]),v._v(" "),_("ul",[_("li",[v._v("指示该inode代表的文件的类型，如普通文件、目录、符号链接、块设备文件、字符设备文件、管道（FIFO）、套接字等。")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("文件权限（File Permissions）")]),v._v(":")]),v._v(" "),_("ul",[_("li",[v._v("表示文件的访问权限，包括读、写、执行权限。通常用9个比特表示（用户、组、其他用户各占3位）。")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("链接计数（Link Count）")]),v._v(":")]),v._v(" "),_("ul",[_("li",[v._v("指示有多少个目录项（硬链接）指向这个inode。如果一个文件有多个硬链接，这个计数会大于1。当计数降到0时（没有任何目录项指向这个inode），操作系统可以删除文件。")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("文件所有者的用户ID（Owner UID）")]),v._v(":")]),v._v(" "),_("ul",[_("li",[v._v("指示文件的所有者（用户）的用户ID。")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("文件所有者的组ID（Group GID）")]),v._v(":")]),v._v(" "),_("ul",[_("li",[v._v("指示文件所属的用户组的组ID。")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("文件大小（Size）")]),v._v(":")]),v._v(" "),_("ul",[_("li",[v._v("对于普通文件，表示文件的字节大小；对于目录，表示目录条目列表的大小。")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("时间戳（Timestamps）")]),v._v(":")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("最后访问时间（Access Time, atime）")]),v._v(": 文件上次被访问的时间。")]),v._v(" "),_("li",[_("strong",[v._v("最后修改时间（Modification Time, mtime）")]),v._v(": 文件内容上次被修改的时间。")]),v._v(" "),_("li",[_("strong",[v._v("状态更改时间（Change Time, ctime）")]),v._v(": 文件的元数据（如权限、所有者等）上次被更改的时间。")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("指向数据块的指针（Pointers to Data Blocks）")]),v._v(":")]),v._v(" "),_("ul",[_("li",[v._v("这些指针用于指示文件数据在磁盘上的物理位置。由于文件可能很大，数据可能分散存储，因此inode包含了指向数据块的多个指针。")]),v._v(" "),_("li",[_("strong",[v._v("直接指针（Direct Pointers）")]),v._v(": inode直接指向文件数据块的指针（通常有12个）。")]),v._v(" "),_("li",[_("strong",[v._v("单级间接指针（Single Indirect Pointer）")]),v._v(": 指向一个包含数据块指针的块。")]),v._v(" "),_("li",[_("strong",[v._v("双级间接指针（Double Indirect Pointer）")]),v._v(": 指向一个块，该块中包含指向其他数据块指针块的指针。")]),v._v(" "),_("li",[_("strong",[v._v("三级间接指针（Triple Indirect Pointer）")]),v._v(": 指向一个块，该块中包含指向双级指针块的指针。")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("文件的块大小（Block Size）")]),v._v(":")]),v._v(" "),_("ul",[_("li",[v._v("表示文件系统中用于存储文件数据的基本单位大小（通常是4KB、8KB等）。该信息通常不在inode中存储，而是由文件系统的超级块（superblock）提供。")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("文件的文件系统标志（Flags）")]),v._v(":")]),v._v(" "),_("ul",[_("li",[v._v("用于控制文件的特殊属性或行为，比如是否是append-only（只能追加写），是否是immutable（不可修改），是否需要进行同步等。")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("数据块数量（Number of Blocks）")]),v._v(":")]),v._v(" "),_("ul",[_("li",[v._v("该文件占用的实际数据块数量。这可能大于文件大小/块大小的结果，因为文件可能占用部分块（称为文件尾碎片）。")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("文件系统特定信息（File System Specific Information）")]),v._v(":")]),v._v(" "),_("ul",[_("li",[v._v("一些文件系统可能会在inode中包含特定的扩展属性或信息，如EXT4中的扩展属性（Extended Attributes）或XFS中的项目ID等。")])])])]),v._v(" "),_("h3",{attrs:{id:"inode的工作方式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#inode的工作方式"}},[v._v("#")]),v._v(" inode的工作方式")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("inode与文件名的关系")]),v._v(": 文件名和inode是分离的。文件名保存在目录条目（directory entry）中，目录条目将文件名映射到inode编号。这样，文件重命名只是改变目录项，而不会影响inode。")]),v._v(" "),_("li",[_("strong",[v._v("inode表")]),v._v(": 在文件系统初始化时（如格式化磁盘时），会创建一个固定数量的inode。这些inode存储在inode表中，每个inode都有唯一的编号（inode number）。文件系统使用这些编号来管理文件。")]),v._v(" "),_("li",[_("strong",[v._v("文件删除")]),v._v(": 当文件被删除时，文件系统减少相应inode的链接计数。如果链接计数降到0，且没有打开的文件描述符指向该inode，文件系统会释放inode及其指向的数据块。")])]),v._v(" "),_("p",[v._v("总结\ninode表中的inode条目记录了文件的所有元数据，但不包括文件名。文件名保存在目录项中，目录项将文件名映射到inode编号。通过这种结构，文件系统能够高效地管理和操作文件，同时提供灵活的文件命名和组织方式。")]),v._v(" "),_("hr"),v._v(" "),_("h2",{attrs:{id:"目录项中包括了哪些内容"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#目录项中包括了哪些内容"}},[v._v("#")]),v._v(" 目录项中包括了哪些内容")]),v._v(" "),_("p",[v._v("目录项（Directory Entry）是文件系统中用于管理文件和目录结构的基本单元。每个目录项关联一个文件或子目录，包含文件名以及指向文件或目录元数据（如inode）的指针。")]),v._v(" "),_("h3",{attrs:{id:"目录项包含的内容"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#目录项包含的内容"}},[v._v("#")]),v._v(" 目录项包含的内容")]),v._v(" "),_("p",[v._v("目录项通常包含以下主要内容：")]),v._v(" "),_("ol",[_("li",[_("p",[_("strong",[v._v("文件名（File Name）")]),v._v(":")]),v._v(" "),_("ul",[_("li",[v._v("文件名是目录项中最直观的信息。它表示当前目录下文件或子目录的名字。文件名的长度和字符集限制依赖于具体文件系统的实现。")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("inode号码（inode Number）")]),v._v(":")]),v._v(" "),_("ul",[_("li",[v._v("inode号码是一个整数，唯一标识一个文件或目录在文件系统中的inode。通过这个号码，文件系统可以在inode表中找到对应的inode，进而读取文件或目录的元数据（如权限、大小、时间戳等）。")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("文件类型（File Type）")]),v._v(":")]),v._v(" "),_("ul",[_("li",[v._v("有些文件系统的目录项中会显式存储文件类型信息，如普通文件、目录、符号链接等。这种做法有助于快速确定文件类型，减少频繁访问inode的需要。比如，EXT4文件系统就将文件类型信息存储在目录项中。")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("记录长度（Record Length）")]),v._v(":")]),v._v(" "),_("ul",[_("li",[v._v("在一些文件系统中，目录项还包括一个字段表示该目录项的总长度，以便文件系统在目录文件中读取或跳过目录项。记录长度通常用于支持目录项的可变长度（如EXT4文件系统）。")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("额外信息（可选的）")]),v._v(":")]),v._v(" "),_("ul",[_("li",[v._v("根据文件系统的不同，目录项可能还包含其他额外信息，例如DOS文件系统中的短文件名（8.3命名格式）、NTFS中的扩展属性、FAT文件系统中的文件属性等。")])])])]),v._v(" "),_("h3",{attrs:{id:"目录项的管理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#目录项的管理"}},[v._v("#")]),v._v(" 目录项的管理")]),v._v(" "),_("p",[v._v("目录项的管理和维护主要由文件系统本身负责，而不是VFS。以下是VFS和文件系统之间的关系及它们各自的职责：")]),v._v(" "),_("h4",{attrs:{id:"_1-vfs-虚拟文件系统-层"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-vfs-虚拟文件系统-层"}},[v._v("#")]),v._v(" 1. VFS（虚拟文件系统）层")]),v._v(" "),_("ul",[_("li",[_("p",[_("strong",[v._v("抽象层")]),v._v(": VFS是一个内核的抽象层，它提供了一个通用接口，使得操作系统可以支持多种文件系统（如EXT4、NTFS、XFS等）。VFS本身不直接管理磁盘上的数据结构（如inode表、目录项），而是依赖于底层文件系统的实现。")])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("路径解析和目录项缓存（dentry cache）")]),v._v(": VFS负责处理路径解析，并维护一个名为"),_("code",[v._v("dentry cache")]),v._v("（目录项缓存）的数据结构。"),_("code",[v._v("dentry cache")]),v._v("缓存文件名到inode的映射，目的是加速路径查找和文件系统操作，但它并不直接存储在磁盘上的目录项。")])])]),v._v(" "),_("h4",{attrs:{id:"_2-文件系统层"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-文件系统层"}},[v._v("#")]),v._v(" 2. 文件系统层")]),v._v(" "),_("ul",[_("li",[_("p",[_("strong",[v._v("实际数据管理")]),v._v(": 具体的文件系统（如EXT4、XFS）负责在磁盘上创建、读取、更新和删除目录项。文件系统定义了目录项的格式和存储位置，并提供操作目录项的函数（如创建、删除、读取）。")])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("与VFS的交互")]),v._v(": 当VFS层请求目录项信息（例如在路径解析过程中），具体文件系统的实现会从磁盘读取相应目录项，然后返回给VFS。文件系统还会将这些信息放入"),_("code",[v._v("dentry cache")]),v._v("中，以加快后续的文件查找操作。")])])]),v._v(" "),_("h3",{attrs:{id:"目录项的结构示例"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#目录项的结构示例"}},[v._v("#")]),v._v(" 目录项的结构示例")]),v._v(" "),_("p",[v._v("不同文件系统的目录项结构可能会有很大不同。下面是EXT4文件系统目录项的一个简化结构示例：")]),v._v(" "),_("ul",[_("li",[_("strong",[_("code",[v._v("inode")]),v._v(" (4 bytes)")]),v._v(": 指向文件或目录的inode号码。")]),v._v(" "),_("li",[_("strong",[_("code",[v._v("record length")]),v._v(" (2 bytes)")]),v._v(": 目录项的总长度（字节数）。")]),v._v(" "),_("li",[_("strong",[_("code",[v._v("name length")]),v._v(" (1 byte)")]),v._v(": 文件名的长度（字节数）。")]),v._v(" "),_("li",[_("strong",[_("code",[v._v("file type")]),v._v(" (1 byte)")]),v._v(": 文件类型（普通文件、目录、符号链接等）。")]),v._v(" "),_("li",[_("strong",[_("code",[v._v("file name")]),v._v(" (variable length)")]),v._v(": 文件名（字符数组，长度可变）。")])]),v._v(" "),_("p",[v._v("总结")]),v._v(" "),_("p",[v._v("目录项是文件系统中用于管理文件名和inode之间映射的基本结构，包含文件名、inode号码、文件类型等信息。目录项的内容由具体文件系统负责管理和维护，而不是VFS。VFS层通过"),_("code",[v._v("dentry cache")]),v._v("缓存路径解析中的目录项信息以提高性能，但不直接管理磁盘上的目录项数据。文件系统负责在磁盘上组织和管理目录项数据，并与VFS层交互完成文件操作。")]),v._v(" "),_("hr"),v._v(" "),_("h2",{attrs:{id:"目录项和inode有什么联系和区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#目录项和inode有什么联系和区别"}},[v._v("#")]),v._v(" 目录项和inode有什么联系和区别")]),v._v(" "),_("p",[v._v("**目录项（Directory Entry）"),_("strong",[v._v("和")]),v._v("inode（索引节点）**是文件系统中两个重要的数据结构，它们相互关联但承担不同的功能和职责。")]),v._v(" "),_("h3",{attrs:{id:"目录项和inode的联系"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#目录项和inode的联系"}},[v._v("#")]),v._v(" 目录项和inode的联系")]),v._v(" "),_("ol",[_("li",[_("p",[_("strong",[v._v("关联性")]),v._v(":")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("目录项")]),v._v("：每个目录项代表一个文件或子目录，并包含文件名和指向文件元数据的指针（inode号码）。目录项存在于目录文件中，每个目录是一个文件，它的内容就是目录项列表。")]),v._v(" "),_("li",[_("strong",[v._v("inode")]),v._v("：每个inode存储一个文件或目录的元数据（如文件大小、权限、所有者、时间戳等）。inode不包含文件名，只包含与文件内容和属性有关的信息。")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("连接方式")]),v._v(":")]),v._v(" "),_("ul",[_("li",[v._v("一个"),_("strong",[v._v("目录项")]),v._v("通过inode号码（inode number）链接到对应的inode。在文件系统操作中，当需要访问某个文件时，文件系统首先通过目录项找到该文件的inode号码，然后使用该号码定位inode来获取文件的元数据和数据位置。")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("多对一关系")]),v._v(":")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("多个目录项可以指向同一个inode")]),v._v("。这意味着多个目录项可以有相同的inode号码，形成所谓的“硬链接”。硬链接是多个文件名指向同一个文件内容的情况，它们共享同一个inode。当创建硬链接时，并不会创建新的文件或inode，只是增加了一个新的目录项指向已有的inode。")])])])]),v._v(" "),_("h3",{attrs:{id:"目录项和inode的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#目录项和inode的区别"}},[v._v("#")]),v._v(" 目录项和inode的区别")]),v._v(" "),_("ol",[_("li",[_("p",[_("strong",[v._v("功能不同")]),v._v(":")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("目录项")]),v._v("：主要用于文件名到inode号码的映射，是文件系统中用来组织文件和目录结构的机制。目录项解决了文件系统中的命名问题，即将文件名和文件内容（由inode表示）分离，使得文件可以在不同的目录下存在不同的名字（通过硬链接）。")]),v._v(" "),_("li",[_("strong",[v._v("inode")]),v._v("：主要用于存储文件的元数据和数据块指针，解决文件系统中的数据管理问题。inode包含了文件的所有属性和指向数据块的指针，使得文件系统可以管理和存储文件内容。")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("存储位置不同")]),v._v(":")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("目录项")]),v._v("：存储在目录文件中，每个目录文件包含它所包含文件和子目录的所有目录项。目录项的数量和布局因具体文件系统而异。例如，在EXT4文件系统中，目录项存储在目录文件的数据块中。")]),v._v(" "),_("li",[_("strong",[v._v("inode")]),v._v("：存储在文件系统的inode表中，inode表是一个预先分配的区域，用于存放所有的inode。每个文件系统在创建时（如格式化磁盘时）会指定inode表的大小和位置。inode的位置固定，并通过inode号码来定位。")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("包含信息不同")]),v._v(":")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("目录项")]),v._v("：包含文件名和inode号码（可能还有文件类型）。目录项并不包含文件的属性信息（如大小、权限等），这些信息都存储在inode中。")]),v._v(" "),_("li",[_("strong",[v._v("inode")]),v._v("：包含文件的元数据（如大小、权限、所有者、时间戳等）和指向数据块的指针。inode不包含文件名，也不存储与命名相关的信息。")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("修改时机不同")]),v._v(":")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("目录项的修改")]),v._v("：当文件或目录被创建、删除、重命名或移动时，目录项会被修改。例如，重命名文件只是修改目录项中的文件名部分，inode不变。")]),v._v(" "),_("li",[_("strong",[v._v("inode的修改")]),v._v("：当文件的内容或元数据（如权限、大小、时间戳等）发生变化时，inode会被修改。例如，写入文件会更改inode中的文件大小和数据块指针等信息。")])])])]),v._v(" "),_("h3",{attrs:{id:"示例"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[v._v("#")]),v._v(" 示例")]),v._v(" "),_("p",[v._v("假设我们有一个文件系统，其中包含如下文件结构：")]),v._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v("/home/user/docs/file1.txt\n/home/user/docs/file2.txt\n/home/user/file1.txt (硬链接到 /home/user/docs/file1.txt)\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br"),_("span",{staticClass:"line-number"},[v._v("3")]),_("br")])]),_("p",[v._v("在这个例子中：")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("/home/user/docs")]),v._v("是一个目录文件，包含两个目录项："),_("code",[v._v("file1.txt")]),v._v("和"),_("code",[v._v("file2.txt")]),v._v("。每个目录项都包含文件名（"),_("code",[v._v("file1.txt")]),v._v("或"),_("code",[v._v("file2.txt")]),v._v("）和它们各自的inode号码。")]),v._v(" "),_("li",[_("code",[v._v("file1.txt")]),v._v("和"),_("code",[v._v("/home/user/file1.txt")]),v._v("是两个目录项，它们指向相同的inode号码。这两个不同的文件路径实际上指向同一个文件，表示为硬链接。文件系统通过inode号码知道它们引用同一文件数据。")]),v._v(" "),_("li",[_("code",[v._v("file2.txt")]),v._v("有自己独立的inode号码，指向另一个inode，存储着它的文件元数据和数据位置。")])]),v._v(" "),_("p",[v._v("总结\n目录项和inode在文件系统中各司其职：目录项负责文件名和inode之间的映射，提供文件系统的命名空间管理；inode则存储文件的元数据和实际数据的位置，负责文件系统的数据管理。它们的结合使得文件系统能够高效地管理和访问文件。")])])}),[],!1,null,null,null);_.default=n.exports}}]);