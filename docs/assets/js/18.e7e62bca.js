(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{368:function(s,t,a){"use strict";a.r(t);var n=a(4),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",[s._v("在C++中，"),t("strong",[s._v("虚函数表（vtable）")]),s._v(" 是实现运行时多态性（即动态多态性）的关键机制。它使得基类指针或引用可以调用派生类的重写方法，而无需在编译时确定实际调用哪个函数。这种机制在对象模型中发挥着重要作用。")]),s._v(" "),t("h3",{attrs:{id:"一、虚函数表-vtable"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、虚函数表-vtable"}},[s._v("#")]),s._v(" 一、虚函数表（vtable）")]),s._v(" "),t("p",[t("strong",[s._v("虚函数表")]),s._v("是由编译器自动生成的一个数据结构，存在于包含虚函数的类中。它本质上是一个函数指针数组，存储了该类的所有虚函数的地址。")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("vtable的内容")]),s._v("：对于一个包含虚函数的类，编译器会为该类生成一个虚函数表。表中存储了指向该类虚函数的指针。如果派生类重写了基类的虚函数，派生类的虚函数表中相应位置会被更新为指向派生类重写函数的指针。")])]),s._v(" "),t("h3",{attrs:{id:"二、虚函数表指针-vptr"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、虚函数表指针-vptr"}},[s._v("#")]),s._v(" 二、虚函数表指针（vptr）")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("vptr")]),s._v(" 是每个对象中隐藏的指针，它指向该对象所属类的虚函数表（vtable）。通常，这个指针是对象的一部分，存储在对象内存布局的最前面。")]),s._v(" "),t("li",[s._v("当一个对象被创建时，vptr被初始化为指向该对象所属类的vtable。")]),s._v(" "),t("li",[s._v("在调用虚函数时，通过vptr查找到对象所属类的vtable，然后通过vtable找到对应的虚函数指针并调用。")])]),s._v(" "),t("h3",{attrs:{id:"三、虚函数表的工作原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、虚函数表的工作原理"}},[s._v("#")]),s._v(" 三、虚函数表的工作原理")]),s._v(" "),t("p",[s._v("当一个类包含虚函数时，编译器为该类生成虚函数表，类的每个对象都有一个vptr指向它所属的虚函数表。通过这个机制，可以实现动态绑定。")]),s._v(" "),t("h4",{attrs:{id:"示例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[s._v("#")]),s._v(" 示例：")]),s._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("<iostream>")])]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Base")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("virtual")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("func1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        std"),t("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),s._v("cout "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Base func1"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" std"),t("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),s._v("endl"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("virtual")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("func2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        std"),t("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),s._v("cout "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Base func2"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" std"),t("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),s._v("endl"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("virtual")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("~")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Base")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("default")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 虚析构函数")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Derived")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token base-clause"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Base")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("func1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        std"),t("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),s._v("cout "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Derived func1"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" std"),t("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),s._v("endl"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("func2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("override")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        std"),t("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),s._v("cout "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Derived func2"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" std"),t("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),s._v("endl"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    Base"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Derived")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    b"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("func1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 调用 Derived::func1")]),s._v("\n    b"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("func2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 调用 Derived::func2")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("delete")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 调用 Derived 析构函数，然后是 Base 析构函数")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br")])]),t("p",[t("strong",[s._v("解释：")])]),s._v(" "),t("ul",[t("li",[s._v("当 "),t("code",[s._v("Derived")]),s._v(" 类对象被创建时，"),t("code",[s._v("Derived")]),s._v(" 对象的 "),t("code",[s._v("vptr")]),s._v(" 会被设置为指向 "),t("code",[s._v("Derived")]),s._v(" 类的虚函数表。")]),s._v(" "),t("li",[s._v("虚函数表 "),t("code",[s._v("vtable")]),s._v(" 包含指向 "),t("code",[s._v("Derived::func1")]),s._v(" 和 "),t("code",[s._v("Derived::func2")]),s._v(" 的指针，而不是 "),t("code",[s._v("Base::func1")]),s._v(" 和 "),t("code",[s._v("Base::func2")]),s._v("。")]),s._v(" "),t("li",[s._v("当通过基类指针 "),t("code",[s._v("b")]),s._v(" 调用虚函数 "),t("code",[s._v("func1()")]),s._v(" 和 "),t("code",[s._v("func2()")]),s._v(" 时，实际调用的是 "),t("code",[s._v("Derived")]),s._v(" 类的实现。")])]),s._v(" "),t("h3",{attrs:{id:"四、虚函数表的特性和注意事项"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、虚函数表的特性和注意事项"}},[s._v("#")]),s._v(" 四、虚函数表的特性和注意事项")]),s._v(" "),t("ol",[t("li",[t("p",[t("strong",[s._v("指针开销")]),s._v("：每个包含虚函数的类对象会多一个 "),t("code",[s._v("vptr")]),s._v(" 指针，这会增加对象的内存开销。")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("性能开销")]),s._v("：通过虚函数表实现动态绑定会稍微降低性能，因为需要通过 "),t("code",[s._v("vptr")]),s._v(" 查找函数指针，而不是直接调用函数。")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("虚析构函数")]),s._v("：如果一个类包含虚函数，通常应将析构函数定义为虚函数，以确保通过基类指针删除派生类对象时，派生类的析构函数能够被正确调用。")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("多重继承")]),s._v("：在多重继承中，每个基类的虚函数表都会生成独立的vtable，派生类对象中可能会有多个vptr来指向不同基类的vtable。")])])]),s._v(" "),t("h3",{attrs:{id:"五、虚函数表的布局-图解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五、虚函数表的布局-图解"}},[s._v("#")]),s._v(" 五、虚函数表的布局（图解）")]),s._v(" "),t("p",[s._v("以 "),t("code",[s._v("Base")]),s._v(" 和 "),t("code",[s._v("Derived")]),s._v(" 为例，虚函数表的布局可能如下所示：")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("Base 类的 vtable")]),s._v(":")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("+------------------+\n| Base::func1()    |\n+------------------+\n| Base::func2()    |\n+------------------+\n| Base::~Base()    |\n+------------------+\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("Derived 类的 vtable")]),s._v(":")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("+------------------+\n| Derived::func1() |\n+------------------+\n| Derived::func2() |\n+------------------+\n| Derived::~Base() | // 如果没有重写，仍指向Base的析构函数\n+------------------+\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("对象中的 vptr")]),s._v(":")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("Base")]),s._v(" 对象的 "),t("code",[s._v("vptr")]),s._v(" 指向 "),t("code",[s._v("Base")]),s._v(" 类的 vtable。")]),s._v(" "),t("li",[t("code",[s._v("Derived")]),s._v(" 对象的 "),t("code",[s._v("vptr")]),s._v(" 指向 "),t("code",[s._v("Derived")]),s._v(" 类的 vtable。")])])])]),s._v(" "),t("h3",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),t("p",[s._v("虚函数表是C++中实现运行时多态性的核心机制，通过vtable和vptr，C++能够在运行时根据对象的实际类型动态调用合适的函数。理解虚函数表及其工作原理对于掌握C++面向对象编程和调试复杂的多态性代码非常重要，也经常出现在C++的面试中。")])])}),[],!1,null,null,null);t.default=e.exports}}]);